@import "_constants";

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}
@mixin body-font($sizeValue: 16, $line-height: 16, $weight: 400, $style: normal) {
	@if($weight == 700){
    font-family:  Tahoma, 'Trebuchet MS', 'Montserrat', Verdana, Geneva, sans-serif;
		font-weight: 700;
	}
	@else {
    font-family:  Tahoma,'Trebuchet MS', 'Montserrat', Verdana, Geneva, sans-serif;
		font-weight: $weight;
	}
  font-style: $style;
  font-size: $sizeValue + px;
	font-size: ($sizeValue / 10) + rem;
  line-height: ($line-height / $sizeValue);
}

@mixin fancy-font($sizeValue: 16, $line-height: 16, $weight: 400, $style: normal) {
	@if($weight == 700){
    font-family:  Garamond, 'Times New Roman', Times, serif;
		font-weight: 700;
	}
	@else {
    font-family: Garamond, 'Times New Roman', Times, serif;
		font-weight: $weight;
	}
  font-style: $style;
  font-size: $sizeValue + px;
	font-size: ($sizeValue / 10) + rem;
  line-height: ($line-height / $sizeValue);
}
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}
@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}


@mixin rounded-corners($radius: 5px) {
  -moz-border-radius:    $radius; // FF1+
  -webkit-border-radius: $radius; // Saf3+, Chrome
  -khtml-border-radius:  $radius; // Konqueror
  border-radius:         $radius; //* Standard. IE9
}


@function getResponsiveWidth($size, $serial_breakpoints: $breakpoints){
  @each $serial_breakpoint in $serial_breakpoints {
    @if($size == nth($serial_breakpoint, 1)){
      @return  $serial_breakpoint;
    }
  }
  @return null;
}

@mixin media-respond($breakpoint, $serial_breakpoints: $breakpoints, $closure: "min", $to_size: null, $retina: null) {
  @each $serial_breakpoint in $serial_breakpoints {
    @if($breakpoint == nth($serial_breakpoint, 1)){
      $_closure: "";
      //$larger_size: nth(getResponsiveWidth($to_size), 2);
      @if($closure == "min" OR $closure == "max" ){ $_closure: "only screen and (#{$closure}-width:  #{nth($serial_breakpoint, 2)}px)";}
      @if($closure == "to" and ($to_size != null) ){ $_closure: "only screen and (min-width:  #{nth($serial_breakpoint, 2)}px) and (max-width:  #{nth(getResponsiveWidth($to_size), 2) - 1 }px)";}
      @media #{$_closure}
      { @content; }
    }

   }

}

@mixin box-shadow( $horiz : .4em , $vert : .4em , $blur : 0px , $spread : 0px , $color : #000000 ){
  -webkit-box-shadow: $horiz $vert $blur $spread $color;
  -moz-box-shadow: $horiz $vert $blur $spread $color;
  box-shadow: $horiz $vert $blur $spread $color;
}